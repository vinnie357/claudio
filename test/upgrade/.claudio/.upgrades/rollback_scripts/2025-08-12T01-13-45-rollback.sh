#!/bin/bash
# Automated Rollback Script - 2025-08-12T01:13:45Z  
# Generated by upgrade-backup-manager for Claudio upgrade rollback

set -e

TIMESTAMP="2025-08-12T01-13-45"
BACKUP_DIR=".claudio/.upgrades/backups/$TIMESTAMP-full-upgrade"
CLAUDE_DIR=".claude"
CLAUDIO_DIR=".claudio"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/../../../" && pwd)"

echo "=== Claudio Upgrade Rollback Script ==="
echo "Timestamp: $TIMESTAMP"
echo "Project Directory: $PROJECT_DIR"
echo "Backup Directory: $BACKUP_DIR"
echo ""

# Change to project directory
cd "$PROJECT_DIR"

# Validation checks
echo "Performing pre-rollback validation..."

if [ ! -d "$BACKUP_DIR" ]; then
    echo "ERROR: Backup directory not found: $BACKUP_DIR"
    echo "Cannot proceed with rollback without valid backup"
    exit 1
fi

if [ ! -f "$BACKUP_DIR/backup_manifest.json" ]; then
    echo "ERROR: Backup manifest not found: $BACKUP_DIR/backup_manifest.json"
    echo "Cannot verify backup integrity"
    exit 1
fi

if [ ! -f "$BACKUP_DIR/checksums.sha256" ]; then
    echo "ERROR: Backup checksums not found: $BACKUP_DIR/checksums.sha256"
    echo "Cannot verify backup integrity"
    exit 1
fi

# Verify backup integrity
echo "Verifying backup integrity..."
if ! (cd "$BACKUP_DIR" && shasum -c checksums.sha256 >/dev/null 2>&1); then
    echo "WARNING: Backup integrity verification failed"
    echo "Some backup files may be corrupted"
    read -p "Continue with potentially corrupted backup? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Rollback cancelled due to backup integrity issues"
        exit 1
    fi
else
    echo "✅ Backup integrity verified"
fi

# User confirmation
echo ""
echo "This will restore your Claudio installation to the state before the upgrade:"
echo "- Installation version: 2.2.1"
echo "- Installation date: 2024-01-15"
echo "- Project: TaskFlow Productivity App"
echo "- Technology stack: React Native, Node.js, TypeScript"
echo ""
echo "WARNING: This will remove any changes made during the upgrade process"
echo "All upgraded components will be reverted to their previous state"
echo ""

read -p "Proceed with rollback? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Rollback cancelled by user"
    exit 0
fi

# Create rollback backup of current state
echo "Creating rollback backup of current state..."
ROLLBACK_BACKUP_DIR=".claudio/.upgrades/backups/rollback-pre-$TIMESTAMP"
mkdir -p "$ROLLBACK_BACKUP_DIR"

if [ -d "$CLAUDE_DIR" ]; then
    cp -r "$CLAUDE_DIR/" "$ROLLBACK_BACKUP_DIR/claude-current/" 2>/dev/null || true
fi

if [ -d "$CLAUDIO_DIR" ]; then
    cp -r "$CLAUDIO_DIR/" "$ROLLBACK_BACKUP_DIR/claudio-current/" 2>/dev/null || true
fi

echo "✅ Current state backed up to: $ROLLBACK_BACKUP_DIR"

# Begin rollback operations
echo ""
echo "Beginning rollback operations..."

# Restore .claude installation
if [ -d "$BACKUP_DIR/claude-installation" ]; then
    echo "Restoring .claude installation..."
    rm -rf "$CLAUDE_DIR" 2>/dev/null || true
    cp -r "$BACKUP_DIR/claude-installation" "$CLAUDE_DIR"
    echo "✅ .claude installation restored"
else
    echo "WARNING: No .claude backup found in $BACKUP_DIR"
fi

# Restore .claudio project content
if [ -d "$BACKUP_DIR/claudio-project" ]; then
    echo "Restoring .claudio project content..."
    rm -rf "$CLAUDIO_DIR/docs" 2>/dev/null || true
    mkdir -p "$CLAUDIO_DIR"
    cp -r "$BACKUP_DIR/claudio-project" "$CLAUDIO_DIR/docs"
    echo "✅ .claudio project content restored"
else
    echo "WARNING: No .claudio backup found in $BACKUP_DIR"
fi

# Verification of rollback
echo ""
echo "Verifying rollback completion..."

# Check version restoration
if [ -f "$CLAUDE_DIR/version.txt" ]; then
    VERSION=$(head -1 "$CLAUDE_DIR/version.txt" | cut -d: -f2 | xargs)
    echo "✅ Version restored: $VERSION"
else
    echo "WARNING: Version file not found after rollback"
fi

# Check agent structure
if [ -f "$CLAUDE_DIR/agents/claudio/discovery-orchestrator.md" ]; then
    echo "✅ Legacy agent structure restored"
else
    echo "WARNING: Expected legacy agent not found"
fi

# Check project discovery
if [ -f "$CLAUDIO_DIR/docs/discovery.md" ]; then
    echo "✅ TaskFlow project discovery restored"
else
    echo "WARNING: Project discovery not found after rollback"
fi

# Update version history
echo ""
echo "Updating version history..."
VERSION_HISTORY=".claudio/.upgrades/version_history.json"

if [ -f "$VERSION_HISTORY" ]; then
    # Update the most recent entry to mark as rolled back
    TEMP_FILE=$(mktemp)
    cat "$VERSION_HISTORY" | sed 's/"status": "completed"/"status": "rolled_back"/' | sed 's/"status": "in_progress"/"status": "rolled_back"/' > "$TEMP_FILE"
    mv "$TEMP_FILE" "$VERSION_HISTORY"
    echo "✅ Version history updated with rollback status"
fi

# Final summary
echo ""
echo "=== ROLLBACK COMPLETED SUCCESSFULLY ==="
echo "Installation restored to:"
echo "- Version: 2.2.1"
echo "- Date: 2024-01-15"
echo "- Mode: Project installation"
echo "- Legacy patterns: Restored (prompts/ structure)"
echo ""
echo "TaskFlow project content:"
echo "- Discovery analysis: Restored (2024-02-28)"
echo "- Technology stack: React Native, Node.js preserved"
echo ""
echo "Backup information:"
echo "- Original backup: $BACKUP_DIR"
echo "- Rollback backup: $ROLLBACK_BACKUP_DIR"
echo "- Checksums verified: $([ -f "$BACKUP_DIR/checksums.sha256" ] && echo "Yes" || echo "No")"
echo ""
echo "The Claudio installation has been successfully rolled back."
echo "You can now use the system as it was before the upgrade attempt."
echo ""

exit 0