#!/bin/bash
# Automated Rollback Script - 2025-08-10T03:40:11Z
# Generated by upgrade-backup-manager
# Restores Claudio installation to comprehensive backup state

set -e

# Configuration
BACKUP_DIR="/Users/vinnie/github/claudio/test/claudio-agents/.claudio/.upgrades/backups/2025-08-10T03-40-11-comprehensive-backup"
INSTALL_DIR="/Users/vinnie/github/claudio/test/claudio-agents/.claudio"
TIMESTAMP="2025-08-10T03:40:11Z"
LOG_FILE="${INSTALL_DIR}/.upgrades/rollback_logs/rollback-${TIMESTAMP}.log"

# Logging function
log() {
    echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] $1" | tee -a "${LOG_FILE}"
}

echo "=========================================="
echo "Claudio Comprehensive Rollback Script"
echo "Timestamp: ${TIMESTAMP}"
echo "=========================================="

log "Starting comprehensive rollback to pre-upgrade state..."

# Pre-rollback validation checks
if [ ! -d "$BACKUP_DIR" ]; then
    log "ERROR: Backup directory not found: $BACKUP_DIR"
    exit 1
fi

if [ ! -f "$BACKUP_DIR/backup_manifest.json" ]; then
    log "ERROR: Backup manifest not found. Backup may be incomplete."
    exit 1
fi

if [ ! -f "$BACKUP_DIR/checksums.sha256" ]; then
    log "ERROR: Backup checksums not found. Cannot verify backup integrity."
    exit 1
fi

log "Pre-rollback validation passed"

# Create rollback log directory
mkdir -p "${INSTALL_DIR}/.upgrades/rollback_logs"

# User confirmation with detailed information
echo
echo "ROLLBACK CONFIRMATION REQUIRED"
echo "==============================="
echo "This will restore your Claudio installation to the state from: ${TIMESTAMP}"
echo
echo "Backup Information:"
echo "- Total Files: 67"
echo "- Total Size: 544K"
echo "- Components: Commands, Agents, Configuration, Project Content"
echo "- Rollback Time: ~60 seconds"
echo
echo "WARNING: This will overwrite your current installation!"
echo

read -p "Continue with rollback? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log "Rollback cancelled by user"
    exit 0
fi

log "User confirmed rollback operation"

# Backup current state before rollback (safety measure)
CURRENT_BACKUP="${INSTALL_DIR}/.upgrades/backups/pre-rollback-$(date -u +%Y-%m-%dT%H-%M-%S)"
log "Creating safety backup of current state: ${CURRENT_BACKUP}"
mkdir -p "${CURRENT_BACKUP}"
cp -r "${INSTALL_DIR}/commands" "${CURRENT_BACKUP}/" 2>/dev/null || true
cp -r "${INSTALL_DIR}/agents" "${CURRENT_BACKUP}/" 2>/dev/null || true
cp "${INSTALL_DIR}/settings.local.json" "${CURRENT_BACKUP}/" 2>/dev/null || true

# Begin rollback operations
log "Starting component restoration..."

# Restore commands
if [ -d "$BACKUP_DIR/commands" ]; then
    log "Restoring commands..."
    rm -rf "${INSTALL_DIR}/commands"
    cp -r "$BACKUP_DIR/commands" "${INSTALL_DIR}/"
    log "Commands restored successfully"
else
    log "WARNING: No commands backup found"
fi

# Restore agents
if [ -d "$BACKUP_DIR/agents" ]; then
    log "Restoring agents..."
    rm -rf "${INSTALL_DIR}/agents"
    cp -r "$BACKUP_DIR/agents" "${INSTALL_DIR}/"
    log "Agents restored successfully"
else
    log "WARNING: No agents backup found"
fi

# Restore configuration
if [ -d "$BACKUP_DIR/configuration" ]; then
    log "Restoring configuration..."
    cp "$BACKUP_DIR/configuration/"* "${INSTALL_DIR}/"
    log "Configuration restored successfully"
else
    log "WARNING: No configuration backup found"
fi

# Restore project content
if [ -d "$BACKUP_DIR/project_content" ]; then
    log "Restoring project content..."
    
    # Restore individual files
    for file in discovery.md prd.md plan.md status.md; do
        if [ -f "$BACKUP_DIR/project_content/$file" ]; then
            cp "$BACKUP_DIR/project_content/$file" "${INSTALL_DIR}/"
            log "Restored $file"
        fi
    done
    
    # Restore directories
    for dir in docs phase1 phase2 phase3 phases shared design quality research; do
        if [ -d "$BACKUP_DIR/project_content/$dir" ]; then
            rm -rf "${INSTALL_DIR}/$dir"
            cp -r "$BACKUP_DIR/project_content/$dir" "${INSTALL_DIR}/"
            log "Restored $dir directory"
        fi
    done
    
    log "Project content restored successfully"
else
    log "WARNING: No project content backup found"
fi

# Verification phase
log "Starting rollback verification..."

# Verify critical files exist
CRITICAL_FILES=(
    "${INSTALL_DIR}/settings.local.json"
)

for file in "${CRITICAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        log "✓ Critical file verified: $file"
    else
        log "✗ Critical file missing: $file"
    fi
done

# Verify directory structure
CRITICAL_DIRS=(
    "${INSTALL_DIR}/commands"
    "${INSTALL_DIR}/agents"
)

for dir in "${CRITICAL_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        log "✓ Critical directory verified: $dir"
    else
        log "✗ Critical directory missing: $dir"
    fi
done

# File count verification
RESTORED_FILES=$(find "${INSTALL_DIR}" -type f ! -path "*/.upgrades/*" | wc -l)
log "Restored file count: ${RESTORED_FILES}"

# Update version history
log "Updating version history..."
# Note: This would typically update version_history.json to mark rollback completion

log "Rollback verification completed"

# Final summary
echo
echo "=========================================="
echo "ROLLBACK COMPLETED SUCCESSFULLY"
echo "=========================================="
echo "Timestamp: ${TIMESTAMP}"
echo "Files Restored: ${RESTORED_FILES}"
echo "Log Location: ${LOG_FILE}"
echo
echo "Your Claudio installation has been restored to the backup state."
echo "All components should now be functional."
echo
log "Comprehensive rollback completed successfully"

exit 0